{"version":3,"sources":["redux/authReducer.ts","dal/axios-instance.ts","redux/loginReducer.ts","components/Login.tsx","components/Main.tsx","App.tsx","reportWebVitals.ts","redux/reduxStore.ts","index.tsx"],"names":["initialState","isAuth","setAuthUserAC","type","axiosInstance","axios","create","withCredentials","baseURL","status","message","captchaUrl","isRem","SetStatusAC","LoginContainer","connect","state","auth","login","capthaUrl","dispatch","email","pass","remember","rm","post","password","rememberMe","then","res","data","resultCode","alert","messages","loginThunk","props","loginRef","React","createRef","passwordRef","rememberMeRef","errorMessage","className","to","style","margin","defaultValue","backgroundColor","outline","borderRadius","ref","onClick","Button","variant","color","current","value","checked","disabled","MainContainer","App","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","combineReducers","action","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d259b73.chunk.js","sourcesContent":["import { authAPI, axiosInstance } from '../dal/axios-instance';\r\nimport { ActionType, DispatchType } from './reduxStore';\r\ntype UserType = {\r\n    userId: null | number\r\n    userName: null | string\r\n    avatarUrl: string\r\n}\r\nexport type InitialStateAuthType = {\r\n    isAuth: boolean\r\n    //userInfo: UserType\r\n}\r\nlet initialState = {\r\n    isAuth: false,\r\n    // userInfo: {\r\n    //     userId: null,\r\n    //     userName: null,\r\n    //     avatarUrl: \"\"\r\n    // }\r\n}\r\nexport type setAuthUserDataType = {\r\n    type: \"SET-AUTH\",\r\n    isAuth: boolean\r\n}\r\n\r\nexport const authReducer = (state: InitialStateAuthType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'SET-AUTH': {\r\n            return {\r\n                ...state,\r\n                isAuth: action.isAuth\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserAC = (isAuth: boolean): setAuthUserDataType => ({\r\n    type: \"SET-AUTH\",\r\n    isAuth: isAuth\r\n})\r\n\r\n\r\n","import axios from \"axios\";\r\n\r\n\r\nexport const axiosInstance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n});\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return axiosInstance.get(`auth/me`);\r\n    }\r\n}","import { setAuthUserAC } from './authReducer';\r\nimport { axiosInstance } from '../dal/axios-instance';\r\nimport { ActionType, DispatchType } from './reduxStore';\r\ntype StatusType = \"INIT\" | \"ERROR\" | \"INPROGRESS\" | \"CAPTCHAREQUIRED\" | \"SUCCESS\"\r\nexport type InitialStateLoginType = {\r\n    status: StatusType\r\n    message: string\r\n    captchaUrl: string\r\n    isRem:boolean\r\n}\r\nexport type SetStatusType = {\r\n    type: \"SET-STATUS\",\r\n    status: StatusType\r\n}\r\nexport type SetMessageType = {\r\n    type: \"SET-MESSAGE\",\r\n    message: string\r\n}\r\n\r\nlet initialState: InitialStateLoginType = {\r\n    status: \"INIT\",\r\n    message: \"\",\r\n    captchaUrl: \"\",\r\n    isRem:false\r\n}\r\n\r\nexport const loginReducer = (state: any = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'SET-STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case 'SET-MESSAGE': {\r\n            return {\r\n                ...state,\r\n                message: action.message\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n\r\n}\r\n\r\nexport const SetStatusAC = (status: StatusType): SetStatusType => ({\r\n    type: \"SET-STATUS\",\r\n    status: status\r\n})\r\nexport const SetMessageAC = (message: string): SetMessageType => ({\r\n    type: \"SET-MESSAGE\",\r\n    message: message\r\n})\r\n\r\nexport const loginThunk = (email: string, pass: string, rm: boolean) => (dispatch: DispatchType) => {\r\n    dispatch(SetStatusAC(\"INPROGRESS\"))\r\n    axiosInstance.post('auth/login', {\r\n        email: email,\r\n        password: pass,\r\n        rememberMe: rm,\r\n    }).then((res) => {\r\n        //debugger \r\n        if (res.data.resultCode === 0) {\r\n            dispatch(SetStatusAC(\"SUCCESS\")); alert('Вы залогинились!')\r\n            dispatch(setAuthUserAC(true))\r\n        } else {\r\n            dispatch(SetStatusAC(\"ERROR\"));\r\n            dispatch(SetMessageAC(res.data.messages[0]));\r\n            alert(res.data.messages[0])\r\n        }\r\n    })\r\n}","import Button from '@material-ui/core/Button';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport '../App.css';\r\nimport { loginThunk } from '../redux/loginReducer';\r\nimport { StateType } from '../redux/reduxStore';\r\n\r\ntype MapStateType = {\r\n  isAuth: boolean\r\n  status: string\r\n  message: string\r\n  capthaUrl: string\r\n  isRem: boolean\r\n}\r\ntype MapDispatchType = {\r\n  login: (email: string, pass: string, remember: boolean) => void\r\n}\r\ntype LoginType = MapStateType & MapDispatchType\r\n\r\nexport function Login(props: LoginType) {\r\n\r\n  let loginRef = React.createRef<HTMLInputElement>();\r\n  let passwordRef = React.createRef<HTMLInputElement>();\r\n  let rememberMeRef = React.createRef<HTMLInputElement>();\r\n\r\n  const login = () => {\r\n    props.login && props.login(\r\n      //@ts-ignore\r\n      loginRef.current?.value,\r\n      //@ts-ignore\r\n      passwordRef.current?.value,\r\n      //@ts-ignore\r\n      rememberMeRef.current.checked)\r\n\r\n  }\r\n  let errorMessage = props.status === \"ERROR\" && <div className=\"error\">{props.message}</div>\r\n  if (props.isAuth) return <Redirect to=\"/main\" />\r\n  return (\r\n    <div className='loginContainer'>\r\n      <div>\r\n        <h3 style={{ margin: \"6px\" }}>Login</h3>\r\n        <input\r\n          className='in'\r\n          type='text'\r\n          defaultValue=\"free@samuraijs.com\"\r\n          style={{ backgroundColor: 'white', outline: \"none\", borderRadius: \"5px\" }}\r\n          ref={loginRef} />\r\n      </div>\r\n      <div>\r\n        <h3 style={{ margin: \"6px\" }}>Password</h3>\r\n        <input\r\n          className='in'\r\n          type='password'\r\n          style={{ backgroundColor: 'white', outline: \"none\", borderRadius: \"5px\" }}\r\n          defaultValue=\"free\"\r\n          ref={passwordRef}\r\n\r\n        />\r\n      </div>\r\n      <p>Remember me</p>\r\n      <div><input\r\n        type='checkbox'\r\n        onClick={()=>{}} //Добавить чекбокс\r\n        ref={rememberMeRef}\r\n      /></div>\r\n      <div><Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={login}\r\n        disabled={props.status === \"INPROGRESS\"}>LogIn</Button></div>\r\n      {errorMessage}\r\n\r\n    </div >\r\n  );\r\n}\r\n\r\nlet mapStateToProps = (state: StateType): MapStateType => ({\r\n  isAuth: state.auth.isAuth,\r\n  status: state.login.status,\r\n  message: state.login.message,\r\n  capthaUrl: state.login.captchaUrl,\r\n  isRem: state.login.isRem\r\n})\r\nlet mapDispatchToProps = (dispatch: any): MapDispatchType => ({\r\n  login: (email: string, pass: string, remember: boolean) => {\r\n    dispatch(loginThunk(email, pass, remember))\r\n  },\r\n})\r\nexport const LoginContainer = connect(mapStateToProps, mapDispatchToProps)(Login)\r\n","import { Button } from '@material-ui/core';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport '../App.css';\r\nimport { setAuthUserAC } from '../redux/authReducer';\r\nimport { DispatchType, StateType } from '../redux/reduxStore';\r\n\r\ntype MainProps = MapStateType & MapDispatchType\r\nexport function Main(props: MainProps) {\r\n\r\n  if (!props.isAuth)  return <Redirect to='/login' />\r\n  return (\r\n    <div className=\"main\">\r\n      <h2>HELLO WORLD</h2>\r\n      <Button\r\n        color='secondary'\r\n        variant='contained'\r\n        style={{ margin: '10px' }}\r\n        onClick={() => { props.login(false) }}\r\n      >LogOut</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\ntype MapStateType = { isAuth: boolean }\r\ntype MapDispatchType = { login: (isAuth: boolean) => void }\r\nlet mapStateToProps = (state: StateType): MapStateType => ({\r\n  isAuth: state.auth.isAuth,\r\n})\r\nlet mapDispatchToProps = (dispatch: DispatchType): MapDispatchType => ({\r\n  login: (isAuth: boolean) => {\r\n    dispatch(setAuthUserAC(isAuth))\r\n  },\r\n})\r\n\r\n\r\nexport const MainContainer = connect(mapStateToProps, mapDispatchToProps)(Main)\r\n\r\n","import React from 'react';\nimport { Route } from 'react-router';\nimport './App.css';\nimport { Login, LoginContainer } from './components/Login';\nimport { Main, MainContainer } from './components/Main';\n\nfunction App() {\n  return (\n          <div className='App'>\n        <Route\n          path='/login'\n          render={() => <LoginContainer />}\n        />\n        <Route\n          path='/main'\n          render={() => <MainContainer />}\n        />\n      </div>\n      );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore, Store } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { authReducer, InitialStateAuthType, setAuthUserDataType } from './authReducer';\r\nimport { InitialStateLoginType, loginReducer, SetStatusType, SetMessageType } from './loginReducer';\r\n\r\nexport type ActionType = | setAuthUserDataType | SetStatusType | SetMessageType\r\nexport type DispatchType = (action: ActionType) => void\r\n\r\nexport type StateType = {\r\n    auth: InitialStateAuthType\r\n    login: InitialStateLoginType\r\n}\r\n\r\n\r\nexport let store: Store = createStore(combineReducers({\r\n    auth: authReducer,\r\n    login: loginReducer\r\n}),\r\n    applyMiddleware(thunk))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/reduxStore'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}